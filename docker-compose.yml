services:
  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 30s
      retries: 10
  
  redis:
    image: redis:6-alpine
    networks:
      - app-network

  celery:
    build: .
    command: celery -A musicplatform worker --loglevel=info
    working_dir: /app
    volumes:
      - ./musicplatform:/app
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - app-network

  web:
    build: .
    command: >
      bash -c "
        until pg_isready -h db -U ${DB_USER} -d ${DB_NAME}; do 
          echo 'Waiting for PostgreSQL...';
          sleep 5; 
        done;
        python manage.py makemigrations;
        python manage.py migrate;
        python manage.py collectstatic;
        python manage.py runserver 0.0.0.0:8000
        python manage.py createsuperuser;
      "
    working_dir: /app
    volumes:
      - ./musicplatform:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  nginx:
    build: ./nginx
    ports:
      - "80:80"
    depends_on:
      - web
    networks:
      - app-network
    volumes:
    - static_volume:/app/staticfiles


networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  static_volume: